//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace Node.Core.NAASAuth {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="NetworkSecurityBinding", Namespace="http://exchangenetwork.net/schema/cdxSecurity.wsdl")]
    public partial class cdxSecurity : Microsoft.Web.Services2.WebServicesClientProtocol
    {
        
        private System.Threading.SendOrPostCallback AuthenticateOperationCompleted;
        
        private System.Threading.SendOrPostCallback CentralAuthOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public cdxSecurity() {
            this.Url = global::Node.Core.Properties.Settings.Default.Node_Core_NAASAuth_cdxSecurity;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event AuthenticateCompletedEventHandler AuthenticateCompleted;
        
        /// <remarks/>
        public event CentralAuthCompletedEventHandler CentralAuthCompleted;
        
        /// <remarks/>
        public event ValidateCompletedEventHandler ValidateCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://exchangenetwork.net/schema/cdxSecurity.xsd", ResponseNamespace="http://exchangenetwork.net/schema/cdxSecurity.xsd")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string Authenticate(string userId, string credential, AuthMethod authenticationMethod) {
            object[] results = this.Invoke("Authenticate", new object[] {
                        userId,
                        credential,
                        authenticationMethod});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AuthenticateAsync(string userId, string credential, AuthMethod authenticationMethod) {
            this.AuthenticateAsync(userId, credential, authenticationMethod, null);
        }
        
        /// <remarks/>
        public void AuthenticateAsync(string userId, string credential, AuthMethod authenticationMethod, object userState) {
            if ((this.AuthenticateOperationCompleted == null)) {
                this.AuthenticateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAuthenticateOperationCompleted);
            }
            this.InvokeAsync("Authenticate", new object[] {
                        userId,
                        credential,
                        authenticationMethod}, this.AuthenticateOperationCompleted, userState);
        }
        
        private void OnAuthenticateOperationCompleted(object arg) {
            if ((this.AuthenticateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AuthenticateCompleted(this, new AuthenticateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://exchangenetwork.net/schema/cdxSecurity.xsd", ResponseNamespace="http://exchangenetwork.net/schema/cdxSecurity.xsd")]
        [return: System.Xml.Serialization.SoapElementAttribute("authToken")]
        public string CentralAuth(string uid, string cred, AuthMethod authMethod, string clientHost) {
            object[] results = this.Invoke("CentralAuth", new object[] {
                        uid,
                        cred,
                        authMethod,
                        clientHost});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CentralAuthAsync(string uid, string cred, AuthMethod authMethod, string clientHost) {
            this.CentralAuthAsync(uid, cred, authMethod, clientHost, null);
        }
        
        /// <remarks/>
        public void CentralAuthAsync(string uid, string cred, AuthMethod authMethod, string clientHost, object userState) {
            if ((this.CentralAuthOperationCompleted == null)) {
                this.CentralAuthOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCentralAuthOperationCompleted);
            }
            this.InvokeAsync("CentralAuth", new object[] {
                        uid,
                        cred,
                        authMethod,
                        clientHost}, this.CentralAuthOperationCompleted, userState);
        }
        
        private void OnCentralAuthOperationCompleted(object arg) {
            if ((this.CentralAuthCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CentralAuthCompleted(this, new CentralAuthCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://exchangenetwork.net/schema/cdxSecurity.xsd", ResponseNamespace="http://exchangenetwork.net/schema/cdxSecurity.xsd")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string Validate(string authToken, string clientHost, string resourceURI) {
            object[] results = this.Invoke("Validate", new object[] {
                        authToken,
                        clientHost,
                        resourceURI});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateAsync(string authToken, string clientHost, string resourceURI) {
            this.ValidateAsync(authToken, clientHost, resourceURI, null);
        }
        
        /// <remarks/>
        public void ValidateAsync(string authToken, string clientHost, string resourceURI, object userState) {
            if ((this.ValidateOperationCompleted == null)) {
                this.ValidateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateOperationCompleted);
            }
            this.InvokeAsync("Validate", new object[] {
                        authToken,
                        clientHost,
                        resourceURI}, this.ValidateOperationCompleted, userState);
        }
        
        private void OnValidateOperationCompleted(object arg) {
            if ((this.ValidateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateCompleted(this, new ValidateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://exchangenetwork.net/schema/cdxSecurity.xsd")]
    public enum AuthMethod {
        
        /// <remarks/>
        password,
        
        /// <remarks/>
        digest,
        
        /// <remarks/>
        certificate,
        
        /// <remarks/>
        xkms,
        
        /// <remarks/>
        hmac,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AuthenticateCompletedEventHandler(object sender, AuthenticateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AuthenticateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AuthenticateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CentralAuthCompletedEventHandler(object sender, CentralAuthCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CentralAuthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CentralAuthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ValidateCompletedEventHandler(object sender, ValidateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591