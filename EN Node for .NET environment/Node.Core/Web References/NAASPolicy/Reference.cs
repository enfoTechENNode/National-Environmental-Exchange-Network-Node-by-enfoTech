//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.1.
// 
#pragma warning disable 1591

namespace Node.Core.NAASPolicy {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="NetworkPolicyBinding", Namespace="http://exchangenetwork.net/schema/cdxPolicy.wsdl")]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(AuthEventType))]
    [System.Xml.Serialization.SoapIncludeAttribute(typeof(PolicyInfo))]
    public partial class AuthorizationPolicy : Microsoft.Web.Services2.WebServicesClientProtocol
    {
        
        private System.Threading.SendOrPostCallback SetPolicyOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePolicyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPolicyListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAuthEventsOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyPolicyOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public AuthorizationPolicy() {
            this.Url = global::Node.Core.Properties.Settings.Default.Node_Core_NAASPolicy_AuthorizationPolicy;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event SetPolicyCompletedEventHandler SetPolicyCompleted;
        
        /// <remarks/>
        public event DeletePolicyCompletedEventHandler DeletePolicyCompleted;
        
        /// <remarks/>
        public event GetPolicyListCompletedEventHandler GetPolicyListCompleted;
        
        /// <remarks/>
        public event GetAuthEventsCompletedEventHandler GetAuthEventsCompleted;
        
        /// <remarks/>
        public event VerifyPolicyCompletedEventHandler VerifyPolicyCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://exchangenetwork.net/schema/cdxPolicy.xsd", ResponseNamespace="http://exchangenetwork.net/schema/cdxPolicy.xsd")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string SetPolicy(string userId, string credential, string subject, MethodName method, string request, string @params, ActionType decision) {
            object[] results = this.Invoke("SetPolicy", new object[] {
                        userId,
                        credential,
                        subject,
                        method,
                        request,
                        @params,
                        decision});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void SetPolicyAsync(string userId, string credential, string subject, MethodName method, string request, string @params, ActionType decision) {
            this.SetPolicyAsync(userId, credential, subject, method, request, @params, decision, null);
        }
        
        /// <remarks/>
        public void SetPolicyAsync(string userId, string credential, string subject, MethodName method, string request, string @params, ActionType decision, object userState) {
            if ((this.SetPolicyOperationCompleted == null)) {
                this.SetPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPolicyOperationCompleted);
            }
            this.InvokeAsync("SetPolicy", new object[] {
                        userId,
                        credential,
                        subject,
                        method,
                        request,
                        @params,
                        decision}, this.SetPolicyOperationCompleted, userState);
        }
        
        private void OnSetPolicyOperationCompleted(object arg) {
            if ((this.SetPolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetPolicyCompleted(this, new SetPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://exchangenetwork.net/schema/cdxPolicy.xsd", ResponseNamespace="http://exchangenetwork.net/schema/cdxPolicy.xsd")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string DeletePolicy(string userId, string credential, string subject, MethodName method, string request, string @params) {
            object[] results = this.Invoke("DeletePolicy", new object[] {
                        userId,
                        credential,
                        subject,
                        method,
                        request,
                        @params});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void DeletePolicyAsync(string userId, string credential, string subject, MethodName method, string request, string @params) {
            this.DeletePolicyAsync(userId, credential, subject, method, request, @params, null);
        }
        
        /// <remarks/>
        public void DeletePolicyAsync(string userId, string credential, string subject, MethodName method, string request, string @params, object userState) {
            if ((this.DeletePolicyOperationCompleted == null)) {
                this.DeletePolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePolicyOperationCompleted);
            }
            this.InvokeAsync("DeletePolicy", new object[] {
                        userId,
                        credential,
                        subject,
                        method,
                        request,
                        @params}, this.DeletePolicyOperationCompleted, userState);
        }
        
        private void OnDeletePolicyOperationCompleted(object arg) {
            if ((this.DeletePolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePolicyCompleted(this, new DeletePolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://exchangenetwork.net/schema/cdxPolicy.xsd", ResponseNamespace="http://exchangenetwork.net/schema/cdxPolicy.xsd")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public PolicyInfo[] GetPolicyList(string userId, string credential, string subject, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string rowId, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string maxRows) {
            object[] results = this.Invoke("GetPolicyList", new object[] {
                        userId,
                        credential,
                        subject,
                        rowId,
                        maxRows});
            return ((PolicyInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPolicyListAsync(string userId, string credential, string subject, string rowId, string maxRows) {
            this.GetPolicyListAsync(userId, credential, subject, rowId, maxRows, null);
        }
        
        /// <remarks/>
        public void GetPolicyListAsync(string userId, string credential, string subject, string rowId, string maxRows, object userState) {
            if ((this.GetPolicyListOperationCompleted == null)) {
                this.GetPolicyListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPolicyListOperationCompleted);
            }
            this.InvokeAsync("GetPolicyList", new object[] {
                        userId,
                        credential,
                        subject,
                        rowId,
                        maxRows}, this.GetPolicyListOperationCompleted, userState);
        }
        
        private void OnGetPolicyListOperationCompleted(object arg) {
            if ((this.GetPolicyListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPolicyListCompleted(this, new GetPolicyListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://exchangenetwork.net/schema/cdxPolicy.xsd", ResponseNamespace="http://exchangenetwork.net/schema/cdxPolicy.xsd")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public AuthEventType[] GetAuthEvents(string userId, string credential, string subject, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string rowId, [System.Xml.Serialization.SoapElementAttribute(DataType="integer")] string maxRows) {
            object[] results = this.Invoke("GetAuthEvents", new object[] {
                        userId,
                        credential,
                        subject,
                        rowId,
                        maxRows});
            return ((AuthEventType[])(results[0]));
        }
        
        /// <remarks/>
        public void GetAuthEventsAsync(string userId, string credential, string subject, string rowId, string maxRows) {
            this.GetAuthEventsAsync(userId, credential, subject, rowId, maxRows, null);
        }
        
        /// <remarks/>
        public void GetAuthEventsAsync(string userId, string credential, string subject, string rowId, string maxRows, object userState) {
            if ((this.GetAuthEventsOperationCompleted == null)) {
                this.GetAuthEventsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAuthEventsOperationCompleted);
            }
            this.InvokeAsync("GetAuthEvents", new object[] {
                        userId,
                        credential,
                        subject,
                        rowId,
                        maxRows}, this.GetAuthEventsOperationCompleted, userState);
        }
        
        private void OnGetAuthEventsOperationCompleted(object arg) {
            if ((this.GetAuthEventsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAuthEventsCompleted(this, new GetAuthEventsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="http://exchangenetwork.net/schema/cdxPolicy.xsd", ResponseNamespace="http://exchangenetwork.net/schema/cdxPolicy.xsd")]
        [return: System.Xml.Serialization.SoapElementAttribute("return")]
        public string VerifyPolicy(string userId, string credential, string subject, NodeId node, MethodName method, string request, string @params) {
            object[] results = this.Invoke("VerifyPolicy", new object[] {
                        userId,
                        credential,
                        subject,
                        node,
                        method,
                        request,
                        @params});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyPolicyAsync(string userId, string credential, string subject, NodeId node, MethodName method, string request, string @params) {
            this.VerifyPolicyAsync(userId, credential, subject, node, method, request, @params, null);
        }
        
        /// <remarks/>
        public void VerifyPolicyAsync(string userId, string credential, string subject, NodeId node, MethodName method, string request, string @params, object userState) {
            if ((this.VerifyPolicyOperationCompleted == null)) {
                this.VerifyPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyPolicyOperationCompleted);
            }
            this.InvokeAsync("VerifyPolicy", new object[] {
                        userId,
                        credential,
                        subject,
                        node,
                        method,
                        request,
                        @params}, this.VerifyPolicyOperationCompleted, userState);
        }
        
        private void OnVerifyPolicyOperationCompleted(object arg) {
            if ((this.VerifyPolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyPolicyCompleted(this, new VerifyPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://exchangenetwork.net/schema/cdxPolicy.xsd")]
    public enum MethodName {
        
        /// <remarks/>
        Any,
        
        /// <remarks/>
        Submit,
        
        /// <remarks/>
        Download,
        
        /// <remarks/>
        Authenticate,
        
        /// <remarks/>
        Query,
        
        /// <remarks/>
        GetStatus,
        
        /// <remarks/>
        Notify,
        
        /// <remarks/>
        Solicit,
        
        /// <remarks/>
        GetServices,
        
        /// <remarks/>
        Execute,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://exchangenetwork.net/schema/cdxPolicy.xsd")]
    public enum ActionType {
        
        /// <remarks/>
        Deny,
        
        /// <remarks/>
        Permit,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://exchangenetwork.net/schema/cdxPolicy.xsd")]
    public partial class PolicyInfo {
        
        private string policyIdField;
        
        private string nodeField;
        
        private string subjectField;
        
        private string methodField;
        
        private string requestField;
        
        private string paramsField;
        
        private string actionField;
        
        /// <remarks/>
        public string PolicyId {
            get {
                return this.policyIdField;
            }
            set {
                this.policyIdField = value;
            }
        }
        
        /// <remarks/>
        public string Node {
            get {
                return this.nodeField;
            }
            set {
                this.nodeField = value;
            }
        }
        
        /// <remarks/>
        public string Subject {
            get {
                return this.subjectField;
            }
            set {
                this.subjectField = value;
            }
        }
        
        /// <remarks/>
        public string Method {
            get {
                return this.methodField;
            }
            set {
                this.methodField = value;
            }
        }
        
        /// <remarks/>
        public string Request {
            get {
                return this.requestField;
            }
            set {
                this.requestField = value;
            }
        }
        
        /// <remarks/>
        public string Params {
            get {
                return this.paramsField;
            }
            set {
                this.paramsField = value;
            }
        }
        
        /// <remarks/>
        public string Action {
            get {
                return this.actionField;
            }
            set {
                this.actionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://exchangenetwork.net/schema/cdxPolicy.xsd")]
    public partial class AuthEventType {
        
        private string eventNameField;
        
        private string userNameField;
        
        private string subjectField;
        
        private string descriptionField;
        
        private string ipAddressField;
        
        private string timeStampField;
        
        /// <remarks/>
        public string EventName {
            get {
                return this.eventNameField;
            }
            set {
                this.eventNameField = value;
            }
        }
        
        /// <remarks/>
        public string UserName {
            get {
                return this.userNameField;
            }
            set {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        public string Subject {
            get {
                return this.subjectField;
            }
            set {
                this.subjectField = value;
            }
        }
        
        /// <remarks/>
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        public string IpAddress {
            get {
                return this.ipAddressField;
            }
            set {
                this.ipAddressField = value;
            }
        }
        
        /// <remarks/>
        public string TimeStamp {
            get {
                return this.timeStampField;
            }
            set {
                this.timeStampField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.1")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.SoapTypeAttribute(Namespace="http://exchangenetwork.net/schema/cdxPolicy.xsd")]
    public enum NodeId {
        
        /// <remarks/>
        [System.Xml.Serialization.SoapEnumAttribute("")]
        Item,
        
        /// <remarks/>
        AL,
        
        /// <remarks/>
        AK,
        
        /// <remarks/>
        AZ,
        
        /// <remarks/>
        AR,
        
        /// <remarks/>
        CA,
        
        /// <remarks/>
        CDX,
        
        /// <remarks/>
        REF,
        
        /// <remarks/>
        CO,
        
        /// <remarks/>
        CT,
        
        /// <remarks/>
        DE,
        
        /// <remarks/>
        DC,
        
        /// <remarks/>
        FL,
        
        /// <remarks/>
        GA,
        
        /// <remarks/>
        HI,
        
        /// <remarks/>
        ID,
        
        /// <remarks/>
        IL,
        
        /// <remarks/>
        IN,
        
        /// <remarks/>
        IA,
        
        /// <remarks/>
        KS,
        
        /// <remarks/>
        KY,
        
        /// <remarks/>
        LA,
        
        /// <remarks/>
        ME,
        
        /// <remarks/>
        MD,
        
        /// <remarks/>
        MA,
        
        /// <remarks/>
        MI,
        
        /// <remarks/>
        MN,
        
        /// <remarks/>
        MS,
        
        /// <remarks/>
        MO,
        
        /// <remarks/>
        MT,
        
        /// <remarks/>
        NE,
        
        /// <remarks/>
        NH,
        
        /// <remarks/>
        NV,
        
        /// <remarks/>
        NJ,
        
        /// <remarks/>
        NM,
        
        /// <remarks/>
        NY,
        
        /// <remarks/>
        NC,
        
        /// <remarks/>
        ND,
        
        /// <remarks/>
        OH,
        
        /// <remarks/>
        OK,
        
        /// <remarks/>
        OR,
        
        /// <remarks/>
        PA,
        
        /// <remarks/>
        RI,
        
        /// <remarks/>
        SC,
        
        /// <remarks/>
        SD,
        
        /// <remarks/>
        TN,
        
        /// <remarks/>
        TX,
        
        /// <remarks/>
        UT,
        
        /// <remarks/>
        VT,
        
        /// <remarks/>
        VA,
        
        /// <remarks/>
        WA,
        
        /// <remarks/>
        WV,
        
        /// <remarks/>
        WI,
        
        /// <remarks/>
        WY,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetPolicyCompletedEventHandler(object sender, SetPolicyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeletePolicyCompletedEventHandler(object sender, DeletePolicyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeletePolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeletePolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPolicyListCompletedEventHandler(object sender, GetPolicyListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPolicyListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPolicyListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PolicyInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PolicyInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAuthEventsCompletedEventHandler(object sender, GetAuthEventsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAuthEventsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAuthEventsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AuthEventType[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AuthEventType[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void VerifyPolicyCompletedEventHandler(object sender, VerifyPolicyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591